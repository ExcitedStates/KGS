#!/usr/bin/python

"""
Takes two PDB-files (initial and target) and H-bond calculations for both from 
KINARI web-server and computes a KGS hydrogen bond definition file containing 
atom ids for H-bonds that exist in both initial and target. 
"""

from pdb_structure import PDBFile
import sys

def parseKinariHBonds(path):
    """
    Parses a kinari file specified by `path` and returns a list of tuples
    associating atom-id pairs of hbonds. For each hbond, the lowest id will
    be the first entry and the higher will be the second. Kinari Hbond files 
    have the format:
       0              4              0             33       -7.08816
       0             10              0             40       -1.85904
       0             17              0             47       -1.63142
       0             24              0             54       -5.39817
    ...
    """
    ret = []
    with open(path) as kinFile:
        for line in kinFile:
            tokens = line.split()
            min_id = min(int(tokens[1]), int(tokens[3]))
            max_id = max(int(tokens[1]), int(tokens[3]))
            ret.append( (min_id, max_id) )
    return ret


if len(sys.argv)!=5:
    print "Usage:",sys.argv[0],"<file1.pdb> <hbonds1.knr> <file2.pdb> <hbonds2.knr>"
    print "where <file1.pdb> and <file2.pdb> are initial and target pdb-files and"
    print "<hbonds1.knr> and <hbonds2.knr> are their corresponding hydrogen bond files"
    print "generated by KINARI: http://kinari.cs.umass.edu/Applications/KINARICurateWeb"
    sys.exit(1)

pdb1 = PDBFile(sys.argv[1])
kin1 = parseKinariHBonds(sys.argv[2])

pdb2 = PDBFile(sys.argv[3])
kin2 = parseKinariHBonds(sys.argv[4])

for (id1_1,id1_2) in kin1:
    atom1_1 = pdb1.getAtomById(id1_1)
    atom1_2 = pdb1.getAtomById(id1_2)
    if atom1_1==None or atom1_2==None:
        print "ERROR: Atom id ",id1_1,"or",id1_2,"could not be found in",sys.argv[1]
        sys.exit(-1)
    
    #Look up residue number and atom name in second pdb-file. If not there ignore hbond
    atom2_1 = pdb2.getAtom(atom1_1.resi, atom1_1.name)
    atom2_2 = pdb2.getAtom(atom1_2.resi, atom1_2.name)
    if atom2_1==None or atom2_2==None:
        continue

    #Ensure that atom2_1 has lower id than atom2_2
    if atom2_1.id>atom2_2.id:
        atom2_1, atom2_2 = atom2_2, atom2_1 #Swap

    #Only print if atom2_1 and atom2_2 were part of an hbond in pdb2
    if (atom2_1.id, atom2_2.id) in kin2:
        print id1_1, id1_2 #, atom2_1.id, atom2_2.id

